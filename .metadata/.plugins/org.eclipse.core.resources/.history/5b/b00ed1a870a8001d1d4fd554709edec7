package com.sportshoes.website.Controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.sportshoes.website.Entity.Category;
import com.sportshoes.website.Entity.Product;
import com.sportshoes.website.Entity.User;
import com.sportshoes.website.Service.CategoryService;
import com.sportshoes.website.Service.ProductService;
import com.sportshoes.website.Service.UserService;
import com.sportshoes.website.dto.ProductDTO;



@Controller
public class AdminController {
	public static String uploadDir=System.getProperty("user.dir")+"/src/main/resources/static/productImages";
	@Autowired
	CategoryService categoryService;
	@Autowired
	ProductService productService;
	@Autowired
	UserService userService;
@GetMapping("/admin")
public String adminHome()
{
	return "adminHome";
}
@GetMapping("/admin/categories")
public String getlistofcategories(Model model)
{
	model.addAttribute("categories",categoryService.getAllCategory());	
return "Category";
}
@GetMapping("/admin/categories/add")
public String getCatAdd(Model model)
{
	model.addAttribute("category",new Category());
return "addNewCategory";
}
@PostMapping("/admin/categories/add")
public String postCatAdd(@ModelAttribute("category") Category category)
{
	categoryService.addCategory(category);
return "redirect:/admin/categories";
}
@GetMapping("/admin/categories/delete/{id}")
public String deleteCat(@PathVariable int id)
{ categoryService.removeCategoryByID(id);
return "redirect:/admin/categories";
	}
@GetMapping("/admin/categories/update/{id}")
public String updateCate(@PathVariable int id,Model model)
{ 
	Optional<Category> category=categoryService.getCategoryByID(id);
	if (category.isPresent())
	{
		model.addAttribute("category",category.get());
      return "addNewCategory";
	}else 
	return "404";
}


///Product Section

@GetMapping("/admin/products")
public String Products(Model model)
{
	model.addAttribute("products",productService.getListofProduct());
return "products";
}
@GetMapping("/admin/products/add")
public String ProductAddGet(Model model)
{
	model.addAttribute("productDTO",new ProductDTO());
	model.addAttribute("categories",categoryService.getAllCategory());
return "productadd";
}


@PostMapping("/admin/products/add")
public String ProductAddPost(@ModelAttribute("ProductDTO")ProductDTO productDTO,@RequestParam("productImage")MultipartFile file,@RequestParam("imgName")String imgName) throws IOException{
	 
	Product product = new Product();
	
	product.setId(productDTO.getId());
	product.setName(productDTO.getName());
	product.setCategory(categoryService.getCategoryByID(productDTO.getCategoryId()).get());
	product.setPrice(productDTO.getPrice());
	product.setSize(productDTO.getSize());
	product.setDescription(productDTO.getDescription());
	String imageUUID;
	if(!file.isEmpty()) {
		imageUUID=file.getOriginalFilename();
		
		Path fileNameAndPath=Paths.get(uploadDir,imageUUID);
		Files.write(fileNameAndPath, file.getBytes()); 
	}else {
		
		imageUUID = imgName;
	}product.setImageName(imageUUID);
	productService.addProduct(product);
	
	return "redirect:/admin/products"; 	  
	    

}


@GetMapping("/admin/product/delete/{id}")
public String deleteProduct(@PathVariable Long id)
{productService.removeProductById(id);
	return "redirect:/admin/products";
	}

@GetMapping("/admin/product/update/{id}")
public String updateProduct(@PathVariable Long id,Model model)
{
	Product product=productService.getProductById(id).get();
	ProductDTO productDTO= new ProductDTO();
	productDTO.setId(product.getId());
	productDTO.setName(product.getName());
	productDTO.setCategoryId(product.getCategory().getId());
	productDTO.setPrice(product.getPrice());
	productDTO.setSize(product.getSize());
	productDTO.setDescription(product.getDescription());
	productDTO.setImageName(product.getImageName());
	model.addAttribute("categories",categoryService.getAllCategory());
	model.addAttribute("productDTO",productDTO);
	return "productadd";
}
/*Mention Order List*/



@GetMapping("/admin/loginlist")
public String userSignUp(Model model)
{
	model.addAttribute("signUpList",userService.listOfSignUpUser());
return "signupUser";
}

@RequestMapping("/admin/loginlist/saerch")
public String viewUser(Model model, @Param("keyword") String keyword) {
    List<User> listuser = userService.listAll(keyword);
    model.addAttribute("listProducts", listuser);
    model.addAttribute("keyword", keyword);
     
    return "signupUser";
}
 




























}

